// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: q.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createKogut = `-- name: CreateKogut :one
INSERT INTO kogut (name, age, sex)
VALUES ($1, $2, $3)
RETURNING id, name, age, sex
`

type CreateKogutParams struct {
	Name string      `json:"name"`
	Age  pgtype.Int4 `json:"age"`
	Sex  bool        `json:"sex"`
}

func (q *Queries) CreateKogut(ctx context.Context, arg CreateKogutParams) (Kogut, error) {
	row := q.db.QueryRow(ctx, createKogut, arg.Name, arg.Age, arg.Sex)
	var i Kogut
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
	)
	return i, err
}

const deleteKogut = `-- name: DeleteKogut :exec
DELETE FROM kogut
WHERE id = $1
`

func (q *Queries) DeleteKogut(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteKogut, id)
	return err
}

const getAllKoguts = `-- name: GetAllKoguts :many
SELECT id, name, age, sex
FROM kogut
ORDER BY id
`

func (q *Queries) GetAllKoguts(ctx context.Context) ([]Kogut, error) {
	rows, err := q.db.Query(ctx, getAllKoguts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Kogut{}
	for rows.Next() {
		var i Kogut
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Sex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKogut = `-- name: GetKogut :one
SELECT id, name, age, sex
FROM kogut
WHERE id = $1
`

func (q *Queries) GetKogut(ctx context.Context, id int32) (Kogut, error) {
	row := q.db.QueryRow(ctx, getKogut, id)
	var i Kogut
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
	)
	return i, err
}

const updateKogut = `-- name: UpdateKogut :one
UPDATE kogut
SET name = $2, age = $3, sex = $4
WHERE id = $1
RETURNING id, name, age, sex
`

type UpdateKogutParams struct {
	ID   int32       `json:"id"`
	Name string      `json:"name"`
	Age  pgtype.Int4 `json:"age"`
	Sex  bool        `json:"sex"`
}

func (q *Queries) UpdateKogut(ctx context.Context, arg UpdateKogutParams) (Kogut, error) {
	row := q.db.QueryRow(ctx, updateKogut,
		arg.ID,
		arg.Name,
		arg.Age,
		arg.Sex,
	)
	var i Kogut
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Sex,
	)
	return i, err
}
